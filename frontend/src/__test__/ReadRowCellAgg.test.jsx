import { render, screen } from './setupTest.js'
import { cleanup } from '@testing-library/react'
import ReadRow from '../components/ReadRow'

const mockData = {
  ID: 0,
  PID: 'SU-11430-1',
  CREATED_DATE: '2022-09-01T18:38:29',
  CRO: 'Pharmaron',
  ASSAY_TYPE: 'pRb 807 HTRF',
  COMPOUND_ID: 'FT008817',
  EXPERIMENT_ID: '208952',
  BATCH_ID: 'FT008817-01',
  CELL_LINE: 'ZR-75-1',
  VARIANT: null,
  PCT_SERUM: '10',
  PASSAGE_NUMBER: '6',
  WASHOUT: 'N',
  CELL_INCUBATION_HR: '18',
  PLOT: '',
  IC50_NM: 77.06,
  FLAG: 0,
  COMMENT_TEXT: 'asdfasdfasdfasdf',
  USER_NAME: 'SPENCER.TRINH',
  CHANGE_DATE: '2022-11-18T15:49:17',
  GEOMEAN: 60.67,
}

afterEach(cleanup)

describe('Check ReadRow component', () => {
  it('renders table row with mock data', async () => {
    render(
      <ReadRow
        data={mockData}
        keyValue={`${mockData.PID}-READ-1`}
        username={mockData.USER_NAME}
        types={['cellular_agg', 'get']}
        columnLoading={false}
        handleEditClick={jest.fn()}
      />
    )
    expect(
      screen.getByText(mockData.CELL_INCUBATION_HR.toString())
    ).toBeTruthy()
    expect(screen.getByText(mockData.EXPERIMENT_ID)).toBeTruthy()
    expect(screen.getByText(mockData.BATCH_ID)).toBeTruthy()
    expect(screen.getByText(mockData.CELL_LINE)).toBeTruthy()
    expect(screen.getByText('-')).toBeTruthy() // variant
    expect(screen.getByText(mockData.IC50_NM)).toBeTruthy()
    expect(screen.getByText(mockData.GEOMEAN)).toBeTruthy()
    expect(screen.getByText(mockData.PCT_SERUM)).toBeTruthy()
    expect(screen.getByText(mockData.WASHOUT)).toBeTruthy()
    expect(screen.getByText(mockData.PASSAGE_NUMBER)).toBeTruthy()
    expect(screen.getByText('include')).toBeTruthy() // flag
    expect(screen.getByRole('img')).toHaveAttribute(
      'src',
      `data:image/png;base64, ${mockData.PLOT}`
    )
  })
})
